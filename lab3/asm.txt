// sub - вычитание, mul - умножение imul - целочисленное умножение
// суффикс на конце - тип данных
// (,) - результат арифметической операции (сложения) 
// sal сдвиг влево на биты
// sltq расширенис eax до rax

// aex - регистр для временных данных, mov - присваивание(значние одного регистра присваивется в другой)
// add - сложение, adc - сложение с учетом переполнения на предыдущем сложении
// n() n - адрес в памяти относительно регистра в скобках 

// суффикс p в сопроцессоре гвоорит, что после операции нужно сдвинуть начало стека
// fld взять число по адресу и рагрузить на вершину стека

// векторные команды
// xmm регистр на 16 байт
// хранит вектор из целочисленных типов
// скалярное команды - взять два числа сложить их с другими двумя числами и получить два результата (как пример)
// в векторных регистрах числа занимают ровно столько, сколько им нужно, в сопроцессоре всегда 10 байт, но выше точность у сопроцессора
// суффикс s скалярная команда, в отличие от вектора может работать только с одним числом
// у x64 по дефолту используется xmm
// pd два дабла

// адреса
// 4() вот это адрес
// считывание с первого места, записывание на второе
// lea - вычисление адреса 0(,%rax,8) значение из rax умножается на 8 и записывается, не обращается в память
// .LC1 - обращение в память
// movsb - обращение в память, строковая команда, работает с памятью, адрес которых уже есть movsb => [rdi++] := [rsi++]
// n(x, y, z) вот эта штука берет, складывает два регистра, получает адрес, по адресу получает значение, если n и z нет, то n = 0, z = 1
// а не, нихера, нужно смотреть, что () эта штука именно делает
//
// флаги
// =======
//
// if/else
// cmovge условное присваивание ge меньше равно иль чето того
//
// stack
// когда кладем в стэк, тогда отнимаем 
// leave восстанавливаем положение стека
// ebp на высоких уровнях оптимизации используется как обычный регист, на низких, как...
; sub - выделение памяти на стеке

; Стек (или стек памяти) - это особая область памяти, используемая в ассемблере и многих других языках программирования для управления временными данными и вызова функций. 
; Стек представляет собой структуру данных, где данные хранятся и извлекаются в порядке "последний вошел - первый вышел" (LIFO - Last-In-First-Out). В ассемблере, управление стеком выполняется с использованием нескольких команд, включая push, pop, call, и ret. Давайте рассмотрим основные аспекты работы со стеком на уровне ассемблера:

; push и pop: Команды push и pop используются для помещения значений на вершину стека и извлечения значений с вершины стека соответственно. Например:

; assembly
; Copy code
; push eax   ; поместить значение регистра eax на вершину стека
; pop ebx    ; извлечь значение с вершины стека и сохранить его в регистре ebx
; Операции push и pop могут использоваться для сохранения и восстановления регистров и локальных переменных внутри функций.

; call и ret: Команды call и ret используются для вызова функций и возврата из функций. Команда call помещает текущий адрес возврата на стек и переходит к указанной функции, 
; а команда ret извлекает адрес возврата с вершины стека и возвращает управление обратно в вызывающую функцию.

; Указатель стека (%esp): Регистр %esp (Stack Pointer) указывает на текущую вершину стека. 
; При использовании команд push и pop, %esp автоматически обновляется. Вы можете использовать %esp для доступа к данным на стеке.

; Работа с параметрами функции: Параметры функции часто передаются через стек, и функция может получить к ним доступ, 
; обращаясь к адресам на стеке с использованием %esp и смещений. Например:

; Сохранение регистров: Перед выполнением функции часто требуется сохранить значения регистров на стеке, чтобы не потерять их. 
; Обычно это делается с использованием команд push и восстановление значений после завершения функции с использованием команд pop.


; %eax: Accumulator register — аккумулятор, применяется для хранения результатов промежуточных вычислений.
; %ebx: Base register — базовый регистр, применяется для хранения адреса (указателя) на некоторый объект в памяти.
; %ecx: Counter register — счетчик, его неявно используют некоторые команды для организации циклов (см. loop).
; %edx: Data register — регистр данных, используется для хранения результатов промежуточных вычислений и ввода-вывода.
; %esp: Stack pointer register — указатель стека. Содержит адрес вершины стека.
; %ebp: Base pointer register — указатель базы кадра стека (англ. stack frame). Предназначен для организации произвольного доступа к данным внутри стека.
; %esi: Source index register — индекс источника, в цепочечных операциях содержит указатель на текущий элемент-источник.
; %edi: Destination index register — индекс приёмника, в цепочечных операциях содержит указатель на текущий элемент-приёмник.
;  смещение(база, индекс, множитель)