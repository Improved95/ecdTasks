swap:
        pushl   %ebp ; Старое значение регистра %ebp (Base Pointer) сохраняется на стеке, чтобы можно было его восстановить перед выходом из функции.
        movl    %esp, %ebp ; Текущее значение регистра %esp (Stack Pointer) копируется в регистр %ebp, устанавливая его в качестве базового указателя для локальных переменных и параметров функции.
        subl    $16, %esp ; Резервируется на стеке место для локальных переменных и других данных размером 16 байт.
        movl    8(%ebp), %eax ; Значение, находящееся по адресу 8(%ebp), загружается в регистр %eax. Это будет первый аргумент функции swap, обычно указатель на int a.
        movl    (%eax), %eax ; Значение, на которое указывает %eax, загружается обратно в %eax. Это значение a из адреса, на который указывает указатель
        movl    %eax, -4(%ebp) ; Значение в %eax сохраняется в локальной переменной, которая находится по адресу -4(%ebp). Это переменная int c
        movl    12(%ebp), %eax ; Значение, находящееся по адресу 12(%ebp), загружается в регистр %eax. Это будет второй аргумент функции swap, обычно указатель на int b
        movl    (%eax), %edx ; Значение, на которое указывает %eax, загружается в регистр %edx. Это значение b из адреса, на который указывает указатель.
        movl    8(%ebp), %eax ; Значение, находящееся по адресу 8(%ebp), загружается в регистр %eax. Это повторно загружает указатель a, который был в %eax ранее
        movl    %edx, (%eax) ; Значение в %edx записывается по адресу, на который указывает %eax. Это производит обмен значениями между *a и *b.
        movl    12(%ebp), %eax ; Значение, находящееся по адресу 12(%ebp), загружается в регистр %eax. Это повторно загружает указатель b, который был в %eax ранее
        movl    -4(%ebp), %edx ; Значение в локальной переменной c, которая находится по адресу -4(%ebp), загружается в регистр %edx
        movl    %edx, (%eax) ; Значение в %edx записывается по адресу, на который указывает %eax. Это завершает обмен значениями между *a и *b
        nop
        leave ; Эта инструкция восстанавливает предыдущее значение %ebp из стека и перемещает %esp на это значение. Это используется перед выходом из функции.
        ret
.LC0:
        .string "%d "
main:
        leal    4(%esp), %ecx        ; Вычисление адреса аргументов командной строки
        andl    $-16, %esp           ; Выравнивание стека на границу 16 байт
        pushl   -4(%ecx)             ; Сохранение указателя на argc на стеке
        pushl   %ebp                 ; Сохранение текущего значения регистра ebp
        movl    %esp, %ebp           ; Установка ebp в текущее значение esp
        pushl   %ecx                 ; Сохранение ecx на стеке
        subl    $36, %esp            ; Распределение места для локальных переменных на стеке
        movl    %ecx, %eax           ; Загрузка указателя на argv (строку командной строки) в eax
        movl    4(%eax), %eax        ; Загрузка указателя на первый аргумент (переданный через командную строку) в eax
        addl    $4, %eax             ; Переход к следующему аргументу (первый аргумент - имя программы)
        movl    (%eax), %eax         ; Загрузка указателя на строку с числом в eax
        subl    $12, %esp            ; Распределение места для передачи аргумента функции atoi
        pushl   %eax                 ; Помещение указателя на строку на стек
        call    atoi                 ; Вызов функции atoi для преобразования строки в число
        addl    $16, %esp            ; Освобождение стека
        movl    %eax, -28(%ebp)      ; Сохранение результата atoi в локальной переменной
        movl    -28(%ebp), %eax      ; Загрузка числа n
        sall    $2, %eax             ; Умножение n на 4 (размер int) для определения размера массива
        subl    $12, %esp            ; Распределение места для передачи аргумента функции malloc
        pushl   %eax                 ; Помещение размера массива на стек
        call    malloc               ; Вызов функции malloc для выделения памяти
        addl    $16, %esp            ; Освобождение стека
        movl    %eax, -32(%ebp)      ; Сохранение указателя на выделенную память в локальной переменной
        movl    $0, -12(%ebp)        ; Инициализация переменной i
        jmp     .L3                  ; Переход к началу цикла
.L4:
        movl    -28(%ebp), %eax ; Загружается значение n в регистр %eax. 
        subl    -12(%ebp), %eax ; Из значения n вычитается текущее значение переменной i, и результат сохраняется в %eax. Это используется для ограничения внутреннего цикла.
        movl    %eax, %ecx ; Значение %eax копируется в %ecx, представляя верхний предел внутреннего цикла.
        movl    -12(%ebp), %eax ; Текущее значение i загружается в %eax.
        leal    0(,%eax,4), %edx ; Вычисляется смещение в байтах для доступа к элементу массива, и результат сохраняется в %edx.
        movl    -32(%ebp), %eax ; Загружается адрес начала массива в %eax.
        addl    %edx, %eax ; добавляется к %eax, чтобы получить адрес текущего элемента массива.
        movl    %ecx, %edx ; Значение %ecx копируется в %edx, представляя верхний предел внутреннего цикла.
        movl    %edx, (%eax) ; Значение в %edx (верхний предел) записывается в текущий элемент массива.
        addl    $1, -12(%ebp) ; величивается значение переменной i на 1.
.L3: ; Метка, обозначающая начало внешнего цикла.
        movl    -12(%ebp), %eax ; Загружается текущее значение переменной i в %eax.
        cmpl    -28(%ebp), %eax ; Сравнивается %eax (текущее значение i) с n (хранящимся по адресу -28(%ebp)).
        jb      .L4 ; Если i меньше n, то происходит переход к метке .L4, продолжая внутренний цикл.
        movl    $0, -16(%ebp) ; Значение 0 сохраняется в локальной переменной по адресу -16(%ebp). Это инициализация переменной j, используемой для внутреннего цикла сортировки пузырьком.
        jmp     .L5
.L9:
        movl    $0, -20(%ebp) ; Метка, обозначающая начало вложенного цикла, который используется для сравнения элементов внутри внутреннего цикла сортировки пузырьком.
        jmp     .L6
.L8:
        movl    -20(%ebp), %eax ; Метка, обозначающая начало блока сравнения элементов во внутреннем цикле.
        leal    0(,%eax,4), %edx ; Текущее значение переменной j загружается в %eax.
        movl    -32(%ebp), %eax ; 32(%ebp), %eax: Загружается адрес начала массива в %eax.
        addl    %edx, %eax ; Вычисляется адрес текущего элемента массива.
        movl    (%eax), %edx ; Значение текущего элемента сохраняется в %edx.
        movl    -20(%ebp), %eax ; Текущее значение переменной j загружается в %eax.
        addl    $1, %eax ; Значение %eax увеличивается на 1, представляя следующий элемент
        leal    0(,%eax,4), %ecx ; Вычисляется смещение в байтах для доступа к следующему элементу массива и сохраняется в %ecx.
        movl    -32(%ebp), %eax ;  Загружается адрес начала массива в %eax.
        addl    %ecx, %eax ; Вычисляется адрес следующего элемента массива.
        movl    (%eax), %eax ; Значение следующего элемента загружается в %eax.
        cmpl    %eax, %edx ; Значение текущего элемента сравнивается со следующим элементом.
        jle     .L7 ; Если текущий элемент не больше следующего, происходит переход к метке .L7
        movl    -20(%ebp), %eax ; Загружается текущее значение переменной j в регистр %eax
        addl    $1, %eax ; Увеличивается %eax на 1, представляя следующий элемент (первый из двух элементов, которые будут обменены).
        leal    0(,%eax,4), %edx ; Вычисляется смещение в байтах для доступа к текущему элементу массива (большему из двух) и сохраняется в %edx.
        movl    -32(%ebp), %eax ; Загружается адрес начала массива в %eax.
        addl    %eax, %edx ; Вычисляется адрес текущего элемента массива (большего из двух).
        movl    -20(%ebp), %eax ; Загружается текущее значение переменной j в %eax для доступа к меньшему элементу.
        leal    0(,%eax,4), %ecx ; Вычисляется смещение в байтах для доступа к меньшему элементу и сохраняется в %ecx.
        movl    -32(%ebp), %eax ; Загружается адрес начала массива в %eax.
        addl    %ecx, %eax ;  Вычисляется адрес меньшего элемента массива.
        subl    $8, %esp ; Резервируется место на стеке для вызова функции swap.
        pushl   %edx ; Адрес большего элемента (текущего элемента массива) помещается на стек в качестве первого аргумента для swap.
        pushl   %eax ; Адрес меньшего элемента помещается на стек в качестве второго аргумента для swap
        call    swap
        addl    $16, %esp ; Освобождает место на стеке после вызова swap
.L7:
        addl    $1, -20(%ebp) ; Значение переменной j увеличивается на 1.
.L6: ; Метка, обозначающая конец вложенного цикла, который используется для сравнения элементов внутри внутреннего цикла сортировки пузырьком.
        movl    -28(%ebp), %eax ; Загружается значение n в регистр %eax.
        subl    $1, %eax ; Из n вычитается 1, представляя верхний предел вложенного цикла.
        cmpl    %eax, -20(%ebp) ; Сравнивается текущее значение переменной j с верхним пределом вложенного цикла. jb .L8: Если j меньше верхнего предела вложенного цикла, происходит переход к метке .L8.
        jb      .L8
        addl    $1, -16(%ebp)
.L5: ;Метка, обозначающая конец внешнего цикла сортировки.
        movl    -28(%ebp), %eax ; Загружается значение n в регистр %eax.
        subl    $1, %eax ; Из n вычитается 1, представляя верхний предел внешнего цикла.d
        cmpl    %eax, -16(%ebp) ; Сравнивается текущее значение переменной i с верхним пределом внешнего цикла. jb .L9: Если i меньше верхнего предела внешнего цикла, 
        jb      .L9
        movl    $0, -24(%ebp)
        jmp     .L10
.L11: ; Метка, обозначающая начало блока вывода отсортированных значений.
        movl    -24(%ebp), %eax ; Загружается текущее значение переменной i в регистр %eax.
        leal    0(,%eax,4), %edx ; Вычисляется смещение в байтах для доступа к текущему элементу массива и сохраняется в %edx.
        movl    -32(%ebp), %eax ; Загружается адрес начала массива в %eax.
        addl    %edx, %eax ; Вычисляется адрес текущего элемента массива.
        movl    (%eax), %eax ; Значение текущего элемента массива загружается в %eax.
        subl    $8, %esp ;  Резервируется место на стеке для вызова функции printf.
        pushl   %eax ; Значение %eax помещается на стек как аргумент для printf.
        pushl   $.LC0
        call    printf
        addl    $16, %esp ; Освобождается место на стеке после вызова printf.
        addl    $1, -24(%ebp)
.L10:
        movl    -24(%ebp), %eax ; Загружается текущее значение переменной i в регистр %eax
        cmpl    -28(%ebp), %eax ; Сравнивается текущее значение i с n (хранящимся по адресу -28(%ebp)).
        jb      .L11
        movl    $0, %eax ; Значение 0 помещается в регистр %eax для возврата функции.
        movl    -4(%ebp), %ecx ; Старое значение указателя стека возвращается в регистр %ecx.
        leave ; Выполняется командой leave для восстановления предыдущего указателя стека %ebp и перемещения указателя стека %esp к нему.
        leal    -4(%ecx), %esp
        ret ; Функция завершает выполнение и возвращает управление вызывающей функции.
