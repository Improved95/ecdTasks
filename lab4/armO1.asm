fact:
    cmp     r0, #0         ; Сравнение аргумента N с 0
    blt     .L3            ; Если N меньше 0, переход к метке .L3
    cbnz    r0, .L9        ; Если N не равно 0, переход к метке .L9
    vmov.f64 d0, #1.0e+0    ; Загрузка 1.0 в d0 (результат факториала)
    bx      lr             ; Возврат из функции
.L9:
    push    {r3, lr}       ; Сохранение регистров r3 и lr
    vpush.64 {d8}           ; Сохранение регистра d8 на стеке
    vmov    s15, r0 ; int  ; Загрузка N в s15 (одинарная точность)
    vcvt.f64.s32 d8, s15    ; Преобразование s15 в d8 (двойная точность)
    subs    r0, r0, #1     ; Уменьшение N на 1
    bl      fact           ; Рекурсивный вызов функции fact
    vmul.f64 d0, d8, d0    ; Умножение d8 на результат и сохранение в d0
    vldm    sp!, {d8}      ; Восстановление d8 с стека
    pop     {r3, pc}       ; Восстановление регистров r3 и pc (возврат)
.L3:
    vldr.64 d0, .L10        ; Загрузка значения из .L10 (0.0) в d0
    bx      lr             ; Возврат из функции
.L10:
        .word   0
        .word   0
.LC0:
        .ascii  "%Le \000"
main:
    push    {r4, lr}       ; Сохранение регистров r4 и lr на стеке
    vpush.64 {d8, d9, d10}  ; Сохранение регистров d8, d9, d10 на стеке
    movs    r4, #0         ; Инициализация r4 (счетчик)
    vldr.64 d9, .L16        ; Загрузка значения из .L16 в d9
    vmov.f64 d10, #2.0e+0  ; Установка 2.0 в d10
.L13:
    vmov    s15, r4 ; int  ; Загрузка r4 (счетчик) в s15 (одинарная точность)
    vcvt.f64.s32 d1, s15    ; Преобразование s15 в d1 (двойная точность)
    vmov.f64 d0, d10       ; Загрузка 2.0 в d0
    bl      pow            ; Вызов функции pow
    vmov.f64 d8, d0        ; Сохранение результата в d8
    mov     r0, r4         ; Перемещение r4 в r0 (аргумент для функции fact)
    bl      fact           ; Рекурсивный вызов функции fact
    vdiv.f64 d7, d8, d0    ; Деление d8 на d0 и сохранение в d7
    vadd.f64 d9, d9, d7    ; Добавление d7 к d9
    adds    r4, r4, #1     ; Увеличение счетчика на 1
    cmp     r4, #101       ; Сравнение r4 с 101
    bne     .L13           ; Если r4 != 101, переход к .L13
    vmov    r2, r3, d9     ; Загрузка d9 в r2, r3 (результат)
    movw    r0, #:lower16:.LC0  ; Загрузка формата строки
    movt    r0, #:upper16:.LC0  ; Загрузка формата строки
    bl      printf          ; Вывод результата
    movs    r0, #0         ; Установка r0 в 0 (завершение программы)
    vldm    sp!, {d8-d10}   ; Восстановление регистров d8-d10
    pop     {r4, pc}        ; Восстановление регистров r4 и pc
.L16:
        .word   0
        .word   0